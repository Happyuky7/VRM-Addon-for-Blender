[project]
requires-python = ">=3.9"

[tool.poetry]
name = "io_scene_vrm"
version = "1.0.0" # Dummy version. See __init__.bl_info["version"] instead.
description = ""
authors = ["Isamu Mogi <isamu@leafytree.jp>", "iCyP"]
license = "MIT"

[tool.poetry.dependencies]
python = "3.10.*"
bpy = "3.6.*"

[tool.poetry.group.dev.dependencies]
codespell = "*"
mypy = "*"
pyright = "*"
ruff = "*"

[tool.ruff]
allowed-confusables = [
    "\u30ce", # Katakana Letter No
]

[tool.ruff.lint.pep8-naming]
extend-ignore-names = [
    "glTF2ExportUserExtension",
    "glTF2ImportUserExtension",
    "EXPORT_SCENE_OT_*",
    "IMPORT_SCENE_OT_*",
    "ICYP_OT_*",
    "VRM_OT_*",
    "VRM_PT_*",
    "VRM_UL_*",
    "WM_OT_*",
]

[tool.ruff.lint]
select = ["ALL"]
ignore = [
    "A003", # Class attribute `x` is shadowing a Python builtin
    "BLE001", # Do not catch blind exception
    "C901", # `x` is too complex (y > z)
    "D205", # 1 blank line required between summary line and description
    "D400", # First line should end with a period
    "D403", # First word of the first line should be capitalized
    "E501", # Line too long (x > y)
    "EM101", # Exception must not use a string literal, assign to variable first
    "EM102", # Exception must not use an f-string literal, assign to variable first
    "EM103", # Exception must not use a `.format()` string directly, assign to variable first
    "ERA001", # Found commented-out code
    "FBT001", # Boolean-typed positional argument in function definition
    "FBT002", # Boolean default positional argument in function definition
    "FBT003", # Boolean positional value in function call
    "FIX001", # Line contains FIXME, consider resolving the issue
    "G003", # Logging statement uses `+`
    "G004", # Logging statement uses f-string
    "INP001", # File `x.py` is part of an implicit namespace package. Add an `__init__.py`.
    "PERF101", # Do not cast an iterable to `list` before iterating over it
    "PERF203", # `try`-`except` within a loop incurs performance overhead
    "PERF401", # Use a list comprehension to create a transformed list
    "PERF402", # Use `list` or `list.copy` to create a copy of a list
    "PLR0911", # Too many return statements (8 > 6)
    "PLR0912", # Too many branches (x > y)
    "PLR0913", # Too many arguments in function definition (9 > 6)
    "PLR0915", # Too many statements (x > y)
    "PLR2004", # Magic value used in comparison, consider replacing 3 with a constant variable
    "PLR5501", # Use `elif` instead of `else` then `if`, to reduce indentation
    "PLW2901", # `for` loop variable `v` overwritten by assignment target
    "PYI025", # Use `from collections.abc import Set as AbstractSet` to avoid confusion with the `set` builtin
    "RET504", # Unnecessary assignment to `x` before `return` statement
    "RSE102", # Unnecessary parentheses on raised exception
    "RUF005", # Consider `[x, *y]` instead of concatenation
    "S101", # Use of `assert` detected
    "S602", # `subprocess` call with `shell=True` seems safe, but may be changed in the future; consider rewriting without `shell`
    "S603", # `subprocess` call: check for execution of untrusted input
    "S607", # Starting a process with a partial executable path
    "SIM108", # Use ternary operator `a = b if c else d` instead of `if`-`else`-block
    "SIM118", # Use `key not in dict` instead of `key not in dict.keys()`
    "T201", # `print` found
    "TCH001", # Move application import `x` into a type-checking block
    "TCH003", # Move standard library import `x` into a type-checking block
    "TD001", # Invalid TODO tag
    "TD004", # Missing colon in TODO
    "TD005", # Missing issue description after `TODO`
    "TRY301", # Abstract `raise` to an inner function

    "ANN101", # Missing type annotation for `self` in method
    "ANN102", # Missing type annotation for `cls` in classmethod
    "D100", # Missing docstring in public module
    "D101", # Missing docstring in public class
    "D102", # Missing docstring in public method
    "D103", # Missing docstring in public function
    "D104", # Missing docstring in public package
    "D105", # Missing docstring in magic method
    "D106", # Missing docstring in public nested class
    "D107", # Missing docstring in `__init__`
    "FA100", # Missing `from __future__ import annotations`, but uses `x`
    "FIX002", # Line contains TODO, consider resolving the issue
    "ISC003", # Explicitly concatenated string should be implicitly concatenated
    "PT", # flake8-pytest-style
    "RUF011", # Dictionary comprehension uses static key: `x`
    "TD002", # Missing author in TODO; try: `# TODO(<author_name>): ...` or `# TODO @<author_name>: ...`
    "TD003", # Missing issue link on the line following this TODO
    "TID252", # Relative imports from parent modules are banned
    "TRY003", # Avoid specifying long messages outside the exception class

    # Ruff 0.1.6 may cause conflicts when used with the formatter: `COM812`, `ISC001`.
    "COM812", # Trailing comma missing
    "ISC001", # Implicitly concatenated string literals on one line
]

[tool.ruff.lint.pydocstyle]
convention = "pep257"

[tool.ruff.lint.pylint]
max-args = 6

[tool.codespell]
ignore-regex = ".* # codespell-ignore"

[tool.mypy]
python_version = "3.9"
strict = true
disallow_any_unimported = true
disallow_any_decorated = true
disallow_any_explicit = true
mypy_path = "$MYPY_CONFIG_FILE_DIR/typings"

[tool.pylint.main]
ignore-paths = "." # Please use Ruff instead.

[tool.pyright]
pythonVersion = "3.9"
pythonPlatform = "All"
typeCheckingMode = "strict"

reportMissingModuleSource = false
reportUnknownArgumentType = false
reportUnknownMemberType = false
reportUnknownVariableType = false
reportImportCycles = true

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"
