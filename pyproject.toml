[project]
requires-python = ">=3.9"

[tool.poetry]
name = "io_scene_vrm"
version = "1.0.0" # Dummy version. See __init__.bl_info["version"] instead.
description = ""
authors = ["Isamu Mogi <isamu@leafytree.jp>", "iCyP"]
license = "MIT"

[tool.poetry.dependencies]
python = "3.10.*"
bpy = "3.6.*"

[tool.poetry.group.dev.dependencies]
codespell = "*"
mypy = "*"
pyright = "*"
ruff = "*"
starry-bpy-type-stubs = { git = "https://github.com/saturday06/starry-bpy-type-stubs.git" }

[tool.ruff]
src = ["src"]
allowed-confusables = [
    "\u30ce", # Katakana Letter No
]
select = ["ALL"]
ignore = [
    # ----- fixing -----

    "E501", # Line too long (x > y)
    "FBT001", # Boolean-typed positional argument in function definition
    "FBT002", # Boolean default positional argument in function definition
    "FBT003", # Boolean positional value in function call
    "G003", # Logging statement uses `+`
    "G004", # Logging statement uses f-string

    # ----- ignored -----

    # SIM118 does not handle `bpy_prop_collection` correctly.
    "SIM118", # Use `key not in dict` instead of `key not in dict.keys()`

    "ANN101", # Missing type annotation for `self` in method
    "ANN102", # Missing type annotation for `cls` in classmethod
    "D100", # Missing docstring in public module
    "D101", # Missing docstring in public class
    "D102", # Missing docstring in public method
    "D103", # Missing docstring in public function
    "D104", # Missing docstring in public package
    "D105", # Missing docstring in magic method
    "D106", # Missing docstring in public nested class
    "D107", # Missing docstring in `__init__`
    "ERA001", # Found commented-out code
    "FA100", # Missing `from __future__ import annotations`, but uses `x`
    "FIX002", # Line contains TODO, consider resolving the issue
    "ISC003", # Explicitly concatenated string should be implicitly concatenated
    "PERF203", # `try`-`except` within a loop incurs performance overhead
    "PLR2004", # Magic value used in comparison, consider replacing 3 with a constant variable
    "PT", # flake8-pytest-style
    "PYI025", # Use `from collections.abc import Set as AbstractSet` to avoid confusion with the `set` builtin
    "RET504", # Unnecessary assignment to `x` before `return` statement
    "RUF011", # Dictionary comprehension uses static key: `x`
    "TCH001", # Move application import `x` into a type-checking block
    "TCH003", # Move standard library import `x` into a type-checking block
    "TD002", # Missing author in TODO; try: `# TODO(<author_name>): ...` or `# TODO @<author_name>: ...`
    "TD003", # Missing issue link on the line following this TODO
    "TID252", # Relative imports from parent modules are banned
    "TRY003", # Avoid specifying long messages outside the exception class

    # Ruff 0.1.6 may cause conflicts when used with the formatter: `COM812`, `ISC001`.
    "COM812", # Trailing comma missing
    "ISC001", # Implicitly concatenated string literals on one line
]

[tool.ruff.per-file-ignores]
"src/io_scene_vrm/__init__.py" = ["UP"]  # It should work with Blender 2.79.

[tool.ruff.lint.pep8-naming]
extend-ignore-names = [
    "glTF2ExportUserExtension",
    "glTF2ImportUserExtension",
    "EXPORT_SCENE_OT_*",
    "IMPORT_SCENE_OT_*",
    "ICYP_OT_*",
    "VRM_OT_*",
    "VRM_PT_*",
    "VRM_UL_*",
    "WM_OT_*",
]

[tool.ruff.lint.pydocstyle]
convention = "pep257"

[tool.ruff.lint.mccabe]
max-complexity = 150

[tool.ruff.lint.pylint]
max-args = 15
max-branches = 120
max-returns = 25
max-statements = 550

[tool.codespell]
ignore-regex = ".* # codespell-ignore"

[tool.mypy]
python_version = "3.9"
strict = true
disallow_any_unimported = true
disallow_any_decorated = true
disallow_any_explicit = true

[tool.pylint.main]
ignore-paths = "." # Please use Ruff instead.

[tool.pyright]
pythonVersion = "3.9"
pythonPlatform = "All"
typeCheckingMode = "strict"

reportMissingModuleSource = false
reportUnknownArgumentType = false
reportUnknownMemberType = false
reportUnknownVariableType = false
reportImportCycles = true

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"
